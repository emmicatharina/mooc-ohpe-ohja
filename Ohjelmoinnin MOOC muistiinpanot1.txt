Ohjelmoinnin MOOC*	String teksti = "sisältää tekstiä";*	int kokonaisluku = 123;*	double liukuluku = 3.141592653;*	boolean totuusarvo = true;*	Kokonaisuluku, eli int	int luku = 4;	Kokonaislukumuuttuja voi sisältää kokonaislukuja, joiden arvot ovat välillä -2147483648 ja 2147483647.*	Liukuluku, eli double	double luku = 4.2;	Liukulukumuuttuja sisältää desimaalilukuja, joiden suurin mahdollinen arvo on noin 21023 Kun desimaaliluku esitetään liukuluvun avulla, voi luku olla epätarkka; liukuluvulla ei pysty esittämään mitä tahansa desimaalilukua. Taustasyihin palataan kurssilla Tietokoneen toiminta.*	Merkkijono, eli String	String teksti = "Hei!";	Merkkijonomuuttuja voi sisältää merkkijonoja. Merkkijonot rajataan hipsuilla.*	Totuusarvo, eli boolean	boolean tosi = true;	Totuusarvomuuttuja sisältää joko arvon true eli totta tai arvon false eli epätotta.Vertailuoperaattorit*	>    suurempi kuin*	>=  suurempi tai yhtä suuri kuin*	<    pienempi kuin*	<=  pienempi tai yhtä suuri kuin*	==  yhtä suuri kuin*	!=   erisuuri kuin*	jakojäännös %*	ja &&*	tai ||*	ei !Osaongelmien tunnistaminen ja ratkaiseminen*	Tutki ongelman kuvausta tai tehtävänantoa ja tunnista ongelmaan liittyvät avainsanat kuten "lue kunnes" tai "lue kokonaislukuja".*	Kullekin avainsanalle, tunnista niihin liittyvät ratkaisumallit, ja ota ratkaisumallit käyttöön.*	Mikäli ongelmaan liittyy aiemmin tuntemattomia osaongelmia, eriytä osaongelma ensin erilleen kaikesta muusta ja harjoittele sen ratkaisemista - yrittäminen (ja erehtyminen) on tärkeää!.*	Yhdistä osat yksi kerrallaan ja muodosta niistä ratkaisu.*	if*	else if*	elsebreakcontinuewhilefor-eachArrayList<String> opettajat = new ArrayList<>();opettajat.add("Sami");opettajat.add("Samu");opettajat.add("Anne");opettajat.add("Anna");for (String opettaja: opettajat) {    System.out.println(opettaja);}  tulos += 3; // tarkoittaa samaa kuin tulos = tulos + 3;  tulos -= 3; // tarkoittaa samaa kuin tulos = tulos - 3;  i++;  // tarkoittaa samaa kuin i = i + 1;	-= / +=Käsitteitä*	muuttuja*	luokka*	metodi = luokkaan kirjoitettu lähdekoodista koostuva kokonaisuus, jolle on annettu nimi, ja jota voidaan kutsua, liittyy aina tiettyyn luokkaan, ja sitä käytetään usein luokasta tehdyn olion sisäisen tilan muokkaamiseen*	parametri*	luokka (esim. Scanner) määrittelee olioiden ominaisuudet eli niihin liittyvät tiedot eli oliomuuttujat ja niiden tarjoamat komennot eli metodit (rintamameistalon piirustukset)*	lista*	indeksi = listan kohta*	olio (rintamamiestalo)*	alkio = esim. taulukon arvo*	konstruktori = olion luova metodi*	oliomuuttuja = luokan sisälle määritelty muuttujaaddsizegetremovecontainsAiemmin toteuttamissamme metodeissa on ollut käytössä määre static. Määre static viittaa siihen, että metodi ei liity olioon ja sen avulla ei voi käsitellä oliolle määriteltyjä muuttujia.Metodeistamme puuttuu jatkossa määre static mikäli ne käsittelevät kyseisestä luokasta luotujen olioiden tietoa. Mikäli metodi saa parametrina kaikki muuttujat, joiden arvoja se käsittelee, voi metodissa olla static-määre.Void kertoo, ettei metodi palauta mitään. Static taas kertoo, ettei metodissa viitata this-muuttujaan.Ensimmäisessä esimerkissä luodaan alkeistyyppinen int-muuttuja, jonka arvoksi kopioidaan luku 10. Kun muuttuja annetaan System.out.println-metodille tulostettavaksi, tulostuu arvo 10. Toisessa esimerkissä luodaan viittaustyyppinen leevi-niminen muuttuja, jonka arvoksi kopioidaan Nimi-luokassa määritellyn konstruktorin kutsun palauttama viite olioon. Kun muuttuja tulostetaan, tulostuu merkkijono Nimi@4aa298b7*	boolean (totuusarvo, joko true tai false)*	byte (8 bittiä sisältävä tavu, välillä -128 ja 127)*	char (yhtä kirjainmerkkiä kuvaava 16-bittiä sisältävä kirjainarvo)*	short (pientä kokonaislukua kuvaava 16 bittiä sisältävä arvo, välillä -32768 ja 32767)*	int (keskikokoista kokonaislukua kuvaava 32 bittiä sisältävä arvo, välillä -231 ja 231-1)*	long (isohkoa kokonaislukua kuvaava 64 bittiä sisältävä arvo, välillä -263 ja 263-1)*	float (32-bittiä käyttävä liukuluku)*	double (64-bittiä käyttävä liukuluku)Taulukkoint[] luvut = new int[3];luvut[0] = 2;luvut[2] = 5;System.out.println(luvut[0]);System.out.println(luvut[2]);length = taulukon pituusString[] palat = rivi.split(";"); Oletetaan, että käytössämme on alla oleva henkilöä kuvaava luokka. Henkilöllä on oliomuuttujat nimi, ikä, paino ja pituus, jonka lisäksi se tarjoaa metodin mm. painoindeksin laskemiseen.ei static = oliometodistatic = luokkametodi, staattinen metodi, "olioista riippumatton"listan (luvut) läpikäynti (for)    int summa = 0;    for (int luku: luvut) {        summa = summa + luku;    }for (Kirja kirja: this.kirjat) {            if (kirja.julkaisija().contains(julkaisija)) {                loydetyt.add(kirja);            }        }Hajautustauluun lisääminen tapahtuu kaksiparametrisella metodilla put(*avain*, *arvo*), joka saa parametrinaan avaimen ja arvon. Hajautustaulusta hakeminen onnistuu metodilla get(*avain*), joka saa parametrinaan avaimen ja palauttaa arvoncontainsKey (Yllä käytetään hajautustaulun tarjoamaa metodia containsKey avaimen olemassaolon tarkastamiseen. Metodi palauttaa arvon true, jos hajautustauluun on lisätty haetulla avaimella mikä tahansa arvo, muulloin metodi palauttaa arvon false.).keySet() (avainten läpikäynti).values() (arvojen läpikäynti).contains.equals.HashCode.getOrDefault (HashMapin metodi getOrDefault hakee sille ensimmäisenä parametrina annettua avainta HashMapista. Jos avainta ei löydy, palauttaa se toisena parametrina annetun arvon. esim. (bongattu, 0).remove.isEmpty.putIfAbsent.toLowerCase.toUpperCase.trimfinalprivatestaticvoidAlkeistyyppi	Viittaustyyppinen vastineint			Integerdouble		Doublechar			Charactersout(Arrays.toString(taulukko))Arrays.sortCollections.sort (lista)Kerrataan vielä: jotta luokkaa voidaan käyttää HashMap:in avaimena, tulee sille määritellä*	metodi equals siten, että kaikki samansuuruisena (tai saman sisältöisinä) ajatellut oliot tuottavat vertailussa tuloksen true ja muut false*	metodi hashCode siten, että mahdollisimman harvalla erisuuruisella oliolla on sama hajautusarvoNeuvoja ohjelmointiin*	Etene pieni askel kerrallaan*	Yritä pilkkoa ongelma osaongelmiin ja ratkaise vain yksi osaongelma kerrallaan*	Testaa aina että ohjelma on etenemässä oikeaan suuntaan eli että osaongelman ratkaisu meni oikein*	Tunnista ehdot, minkä tapauksessa ohjelman tulee toimia eri tavalla. Esimerkiksi yllä tarkistus, jolla katsotaan onko sana jo syötetty, johtaa erilaiseen toiminnallisuuden.*	Kirjoita mahdollisimman "siistiä" koodia*	sisennä koodi*	käytä kuvaavia muuttujien ja metodien nimiä*	älä tee liian pitkiä metodeja, edes mainia*	tee yhdessä metodissa vaan yksi asia*	poista koodistasi kaikki copy-paste*	korvaa koodisi "huonot" ja epäsiistit osat siistillä koodilla*	Astu tarvittaessa askel taaksepäin ja mieti kokonaisuutta. Jos ohjelma ei toimi, voi olla hyvä idea palata aiemmin toimineeseen tilaan. Käänteisesti voidaan sanoa, että rikkinäinen ohjelma korjaantuu harvemmin lisäämällä siihen lisää koodia.Muistilista virheenselvitykseen1.	Sisennä koodisi oikein ja selvitä, puuttuuko sulkuja.2.	Tarkista ovatko käytetyt muuttujat oikean nimisiä.3.	Testaa ohjelman kulkua erilaisilla syötteillä, ja selvitä minkälaisella syötteellä ohjelma ei toimi halutusti. Jos sait virheen testeistä, testit saattavat myös kertoa käytetyn syötteen.4.	Lisää ohjelmaan tulostuskomentoja, joissa tulostat käytettävien muuttujien arvoja ohjelman suorituksen eri vaiheissa.5.	Tarkista, että kaikki käyttämäsi muuttujat on alustettu. Jos tätä ei ole tehty, seuraa virhe NullPointerException.6.	Jos ohjelmasi aiheuttaa poikkeuksen, kannattaa ehdottomasti kiinnittää huomiota poikkeuksen yhteydessä olevaan stack traceen, eli niiden metodikutsujen listaan, minkä seurauksena poikkeuksen aiheuttanut tilanne syntyi.7.	Opettele käyttämään debuggeria, aiemmin nähdyllä videolla pääsee alkuun.Perintä tarkoittaa että perivä luokka saa käyttöönsä perittävän luokan määrittelemiä toiminnallisuuksia ja ominaisuuksia. Perivää luokkaa kutsutaan aliluokaksi ja perittävää luokkaa yliluokaksi - Kirja on luokan Object aliluokka, ja Object on luokan Kirja yliluokka.Annotaatio @Override kertoo lukijalle että annotaatiota seuraava metodi korvaa perityssä luokassa määritellyn metodin.Luokan ominaisuudet peritään avainsanalla extends. Luokan perivää luokkaa kutsutaan aliluokaksi (subclass), perittävää luokkaa yliluokaksi (superclass).public class Moottori extends Osa {private String moottorityyppi;    public Moottori(String moottorityyppi, String tunnus, String valmistaja, String kuvaus) {        super(tunnus, valmistaja, kuvaus);        this.moottorityyppi = moottorityyppi;    }    public String getMoottorityyppi() {        return moottorityyppi;    }}Kutsu on hieman samankaltainen kuin this-kutsu konstruktorissa; this-kutsulla kutsutaan tämän luokan konstruktoria, super-kutsulla yliluokan konstruktoria. Mikäli konstruktorissa käytetään yliluokan konstruktoria, eli konstruktorissa on super-kutsu, tulee super-kutsun olla this-kutsun lailla konstruktorin ensimmäisellä rivillä.Suoritettava metodi valitaan aina olion todellisen tyypin perusteella riippumatta käytetyn muuttujan tyypistä. Oliot ovat monimuotoisia, eli olioita voi käyttää usean eri muuttujatyypin kautta. Suoritettava metodi liittyy aina olion todelliseen tyyppiin. Tätä monimuotoisuutta kutsutaan polymorfismiksi.Rajapinnatpublic interface Luettava public class Tekstiviesti implements LuettavaLuettava luettava = new Tekstiviesti("ope", "Tekstiviesti on Luettava!"); // toimiiTekstiviesti viesti = luettava; // ei toimiTekstiviesti muunnettuViesti = (Tekstiviesti) luettava; // toimii jos ja vain jos                                                        // luettava on tyyppiä TekstiviestiVirtastream() (virran luominen)			Metodia kutsutaan Collection-rajapinnan toteuttavalle kokoelmalle kuten ArrayList-oliolle. Luotavalle virralle tehdään jotain.mapToInt(arvo -> toinen) (virran muuntaminen kokonaislukuvirraksi)Virta muuntuu kokonaislukuja sisältäväksi virraksi. Merkkijonoja sisältävä muunnos voidaan tehdä esimerkiksi Integer-luokan valueOf-metodin avulla. Kokonaislukuja sisältävälle virralle tehdään jotain.map() (arvon muuntaminen muodosta toiseen)filter(arvo -> hyvaksymisehto) (arvojen rajaaminen)Virrasta rajataan pois ne arvot, jotka eivät täytä hyväksymisehtoa. "Nuolen" oikealla puolella on lauseke, joka palauttaa totuusarvon. Jos totuusarvo on true, arvo hyväksytään virtaan. Jos totuusarvo on false, arvoa ei hyväksytä virtaan. Rajatuille arvoille tehdään jotain.average()(keskiarvon laskeminen)Palauttaa OptionalDouble-tyyppisen olion, jolla on double tyyppisen arvon palauttava metodi getAsDouble(). Metodin average() kutsuminen onnistuu kokonaislukuja sisältävälle virralle (luominen onnistuu mapToInt-metodilla).count() (virrassa olevien alkioiden lukumäärä)Palauttaa virrassa olevien alkioiden lukumäärän long-tyyppisenä arvona.collect() (kerää virrassa olevat arvot arvot sille annettuun kokoelmaan, esim. listalle)Collectors.toCollection(ArrayList::new)Collectors.toList()reduce(*alkutila*, (*edellinen*, *olio*) -> *mitä oliolla tehdään*) (listan alkioiden yhdistäminen toiseen muotoon)Esim. (0, (edellinenSumma, luku) -> edellinenSumma + luku)sum() (virrassa olevien alkioiden summa)Combarablepublic class Kerholainen implements Comparable<Kerholainen>@Override    public int compareTo(Kerholainen kerholainen) {        if (this.pituus == kerholainen.getPituus()) {            return 0;        } else if (this.pituus > kerholainen.getPituus()) {            return 1;        } else {            return -1;        }    }henkilot.stream().sorted((h1, h2) -> {    return h1.getSyntymavuosi() - h2.getSyntymavuosi();}).forEach(h -> System.out.println(h.getNimi()));sorted() (virran järjestäminen, ei järjestä alkuperäistä listaa)Collections.sort() (järjestää myös alkuperäisen listan oliot)(public class ... implements *RajapintaEka*, *RajapintaToka* ...)Comparator<Elokuva> vertailija = Comparator              .comparing(Elokuva::getJulkaisuvuosi)              .thenComparing(Elokuva::getNimi);Säännölliset lausekkeetKäytetään String-luokan metodia matches(), joka tarkistaa vastaako merkkijono parametrina annettua säännöllistä lauseketta.Pystyviiva tarkoittaa, että säännöllisen lausekkeen osat ovat vaihtoehtoisia.Sulkujen avulla voimme rajoittaa vaihtoehtoisuuden vain osaan merkkijonoa.Merkintä * toisto 0... kertaaMerkintä + toisto 1... kertaaMerkintä ? toisto 0 tai 1 kertaaMerkintä {a} toisto a kertaaMerkintä {a,b} toisto a ... b kertaaMerkintä {a,} toisto a ... kertaaSamassa säännöllisessä lausekkeessa voi käyttää myös useampia toistomerkintöjä. Esimerkiksi säännöllinen lauseke 5{3}(1|0)*5{3} määrittelee merkkijonot, jotka alkavat ja loppuvat kolmella vitosella. Välissä saa tulla rajaton määrä ykkösiä ja nollia.Merkkiryhmän avulla voi määritellä lyhyesti joukon merkkejä. Merkit kirjoitetaan hakasulkujen sisään, ja merkkivälin voi määrittää viivan avulla. Esimerkiksi merkintä [145] tarkoittaa samaa kuin (1|4|5) ja merkintä [2-36-9] tarkoittaa samaa kuin (2|3|6|7|8|9). Vastaavasti merkintä [a-c]* määrittelee säännöllisen lausekkeen, joka vaatii että merkkijono sisältää vain merkkejä a, b ja c.Enum (lueteltu tyyppi)Luetellun arvon numeraalisen tunnuksen saa selville metodille ordinal().IteraattoriIterator<Kortti> iteraattori = kortit.iterator();hasNext() (kysytään, onko läpikäytäviä olioita vielä jäljellä)next() (jos on, iteraattorilta voidaan pyytää seuraava olio)http://yuml.me/edit/783a96a7PakkauksetOhjelman pakkausrakenne voi olla - esimerkiksi - seuraava:*	lentokentta - sisältää ohjelman käynnistämiseen tarvittavan pääohjelmaluokan.*	lentokentta.domain - sisältää aihealueen käsitteitä kuvaavat luokat Lentokone, Lento, ja Paikka.*	lentokentta.logiikka - sisältää toiminnallisuuden, jonka avulla sovellusta hallinnoidaan*	lentokentta.ui - sisältää tekstikäyttöliittymänparseInt????Käyttöliittymän rakenne on siis lyhyesti seuraava. Ikkuna sisältää Scene-olion. Scene-olio sisältää käyttöliittymäkomponenttien asettelusta vastaavan olion. Käyttöliittymäkomponenttien asettelusta vastaava olio voi sisältää sekä käyttöliitymäkomponentteja, että käyttöliittymäkomponenttien asettelusta vastaavia olioita.Application-luokkasetTitelsetSceneSceneStageBorderPane (ylälaita, oikea laita, alalaita, vasen laita ja keskikohta)FlowPane (komponentit tulevat vierekkäin, allekkain, jos kapea ikkuna)GridPane (komponentit ruudukkoon)HBox (komponentit riviin, horizonal)	setSpacing (väliin tyhjä)VBox (komponentit allekkain, vertical)ButtonLabelTextField